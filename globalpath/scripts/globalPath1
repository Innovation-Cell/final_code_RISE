#!/usr/bin/env python

import rospy
from vectornav.msg import vn200_msg
from std_msgs.msg import String
import sys
from geodesy import utm
import urllib2
import json
import decimal

def decodeGMapPolylineEncoding(asciiEncodedString):

    strLen = len(asciiEncodedString)

    index = 0
    lat = 0
    lng = 0
    coordPairString = ""
    latString = []
    lonString = []
    countOfLatLonPairs = 0
    firstLatLonPair = ""
    gotFirstPair = False

    while index < strLen:
        shift = 0
        result = 0
        if countOfLatLonPairs >= 1:
            coordPairString += ","
			
        stayInLoop = True
        while stayInLoop:                                                # GET THE LATITUDE
            b = ord(asciiEncodedString[index]) - 63
            result |= (b & 0x1f) << shift
            shift += 5
            index += 1

            if not b >= 0x20:
                stayInLoop = False

        # Python ternary instruction..
        dlat = ~(result >> 1) if (result & 1) else (result >> 1)
        lat += dlat

        shift = 0
        result = 0

        stayInLoop = True
        while stayInLoop:                                                # GET THE LONGITUDE
            b = ord(asciiEncodedString[index]) - 63
            result |= (b & 0x1f) << shift
            shift += 5
            index += 1

            if not b >= 0x20:
                stayInLoop = False

        # Python ternary instruction..
        dlng = ~(result >> 1) if (result & 1) else (result >> 1)
        lng += dlng

        lonNum = lng * 1e-5
        latNum = lat * 1e-5
        latString.append(latNum)
        lonString.append(lonNum)
		
        if gotFirstPair == False:
            gotFirstPair = True
            firstLatLonPair = str(lonNum) + " " + str(latNum)

        countOfLatLonPairs += 1
	wkt = zip(latString,lonString)
    return wkt

def callback(data):

	Latitude=str(data.LLA.latitude)
	Longitude=str(data.LLA.longitude)    
    			
	orgLat = Latitude
	orgLon = Longitude   

	destLat = "19.130493"; 
	destLon = "72.918958";

	orgCo = orgLat+","+orgLon;
	destCo = destLat+","+destLon;
	str_origin = "origin="+orgCo;
	str_dest = "destination="+destCo;
	sensor = "sensor=false";
	mode = "mode=driving";
	alter = "alternatives=true";
	parameters = str_origin+"&"+str_dest+"&"+sensor+"&"+mode+"&"+alter;
	output = "json";
	url2 = "https://maps.googleapis.com/maps/api/directions/"+output+"?"+parameters;
        
	content = urllib2.urlopen(url2).read() #this is a string
	cont = json.loads(content)				#this is a dictionary
	rues = cont['routes']
	total = 0 
	for tmp_object in rues:
		total = total +1 
	if total > 0:
		minIndex = 0
		minDist = 99999
		for i in range(total):
			dist = cont['routes'][i]['legs'][0]['distance']['value']
			if int(dist) < int(minDist):
				minDist = dist
				minIndex = i

		ssum = cont['routes'][int(minIndex)]['overview_polyline']['points'];

    #coors ="[(19.133656, 72.915358), (19.134011, 72.915361), (19.134363, 72.915372), (19.134328, 72.914795), (19.134300, 72.914213), (19.133960, 72.914060), (19.133535, 72.913915), (19.133271, 72.913824), (19.133013, 72.913733), (19.133094, 72.913492), (19.133218, 72.913100), (19.133383, 72.912644)]" 
    
		coors = decodeGMapPolylineEncoding(ssum)
     
		pub = rospy.Publisher('/gps_pnts', String, queue_size=10)	
		rospy.loginfo(str(coors))
		pub.publish(str(coors))
    
def listener():	
	rospy.Subscriber("/vn200_monitor", vn200_msg, callback) 
	r = rospy.Rate(.5)        
	r.sleep()
	rospy.spin()     
         
if __name__ == '__main__':
	try:
		rospy.init_node('globalPath1')
		listener()
	except rospy.ROSInterruptException:
		pass
  
    

